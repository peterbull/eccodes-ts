name: Publish and Release

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install eccodes
        run: |
          sudo apt-get update
          sudo apt-get install -y libeccodes-dev libeccodes-tools

      - run: pnpm install --frozen-lockfile
      - run: pnpm lint:check
      - run: pnpm test

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"

      - run: pnpm install --frozen-lockfile
      - run: pnpm build

      - name: Version and Publish
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Check if this version exists on npm
          if ! npm view eccodes-ts@${CURRENT_VERSION} version &> /dev/null; then
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'github-actions@users.noreply.github.com'
            
            # Increment patch version
            VERSION=$(pnpm version patch)
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            
            # Publish to npm
            pnpm publish --no-git-checks
            
            # Push changes
            git push --follow-tags
          else
            echo "Version ${CURRENT_VERSION} already exists on npm, skipping publish"
            echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
            exit 0
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  release:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          VERSION: ${{ needs.publish.outputs.version }}
        run: |
          gh release create "${VERSION}" \
            --repo="${GITHUB_REPOSITORY}" \
            --title="Release ${VERSION}" \
            --generate-notes
